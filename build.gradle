plugins {
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id "org.sonarqube" version "2.8"
	id 'java'
}
group = 'com.healthkit.consumer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "cbartram_HealthKit-Consumer"
		property "sonar.projectVersion", "1.0"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.sources", "."
		property "sonar.exclusions", "client/**/*,build/**/*,gradle/**/*,.gradle/**/*,src/test/**/*,*.properties"
	}
}

if (hasProperty('buildScan')) {
	buildScan {
		termsOfServiceUrl = 'https://gradle.com/terms-of-service'
		termsOfServiceAgree = 'yes'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compile 'org.mongodb:mongodb-driver-reactivestreams:1.13.1'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.security:spring-security-oauth2-resource-server'
	implementation 'org.springframework.security:spring-security-oauth2-jose'
	implementation 'org.springframework.security:spring-security-config'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'io.projectreactor:reactor-test'
}

test {
	useJUnitPlatform()
}
